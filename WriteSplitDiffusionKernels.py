Suffix_List = ["YX", "ZX", "ZY"]
Gradient_Index_List = [["1","0"],["2","0"],["2","1"]]
Kernel_C_Filename = "/home/2014-0004_focal_therapy/PhDs/AdapTT/Nikhil/DwarfElephant/src/kernels/DwarfElephantRBDiffusion"
Kernel_h_Filename = "/home/2014-0004_focal_therapy/PhDs/AdapTT/Nikhil/DwarfElephant/include/kernels/DwarfElephantRBDiffusion"

for index in range(len(Suffix_List)):
  with open(Kernel_C_Filename+Suffix_List[index]+".C","w") as C_file:
    C_file.write("/** \n")
    C_file.write("* This Kernel splits the diffusion operator into a sum of products of partial dervatives \n")
    C_file.write("* This is for use with geometrical parametrizations \n")
    C_file.write("*/ \n")
    C_file.write(" \n ")
    C_file.write("///---------------------------------INCLUDES-------------------------------- \n")
    C_file.write("//MOOSE includes (DwarfElephant package) \n")
    C_file.write('#include "DwarfElephantRBDiffusion'+Suffix_List[index]+'.h" \n')
    C_file.write("\n")
    C_file.write("///----------------------------INPUT PARAMETERS----------------------------- \n")
    C_file.write("template<> \n")
    C_file.write("InputParameters validParams<DwarfElephantRBDiffusion"+Suffix_List[index]+">() \n")
    C_file.write("{\n")
    C_file.write("  InputParameters params = validParams<DwarfElephantRBKernel>(); \n")
    C_file.write('  params.addClassDescription("Implements a Diffusion problem using \ \n')
    C_file.write('                             the RBKernel.");\n')
    C_file.write("  return params;\n")
    C_file.write("}\n")
    C_file.write("\n")
    C_file.write("///-------------------------------CONSTRUCTOR------------------------------- \n")
    C_file.write("DwarfElephantRBDiffusion"+Suffix_List[index]+"::DwarfElephantRBDiffusion"+Suffix_List[index]+"(const InputParameters & parameters) : \n")
    C_file.write("  DwarfElephantRBKernel(parameters) \n")
    C_file.write("{\n")
    C_file.write("}\n")
    C_file.write("\n")
    C_file.write("///----------------------------------PDEs----------------------------------- \n")
    C_file.write("Real\n")
    C_file.write("DwarfElephantRBDiffusion"+Suffix_List[index]+"::computeQpResidual() \n")
    C_file.write("{\n")
    C_file.write("  return _grad_u[_qp] * _grad_test[_i][_qp];\n")
    C_file.write("}\n")
    C_file.write("\n")
    C_file.write("Real\n")
    C_file.write("DwarfElephantRBDiffusion"+Suffix_List[index]+"::computeQpJacobian()\n")
    C_file.write("{\n")
    C_file.write("  return _grad_phi[_j][_qp]("+Gradient_Index_List[index][0]+") * _grad_test[_i][_qp]("+Gradient_Index_List[index][1]+");\n")
    C_file.write("}\n")
    C_file.write("\n")
    C_file.write("Real\n")
    C_file.write("DwarfElephantRBDiffusion"+Suffix_List[index]+"::computeQpOutput()\n")
    C_file.write("{\n")
    C_file.write("  return 1;\n")
    C_file.write("}\n")

  with open(Kernel_h_Filename+Suffix_List[index]+".h","w") as h_file:
    h_file.write("/**\n")
    h_file.write(" * This Kernel splits the diffusion operator into a sum of products of partial dervatives\n ")
    h_file.write(" * This is for use with geometrical parametrizations\n")
    h_file.write(" */\n")
    h_file.write("\n")
    h_file.write("///-------------------------------------------------------------------------\n")
    h_file.write("#ifndef DWARFELEPHANTRBDIFFUSION"+Suffix_List[index]+"_H\n")
    h_file.write("#define DWARFELEPHANTRBDIFFUSION"+Suffix_List[index]+"_H\n")
    h_file.write("\n")
    h_file.write("///---------------------------------INCLUDES--------------------------------\n")
    h_file.write("// MOOSE includes (DwarfElephant package)\n")
    h_file.write('#include "DwarfElephantRBKernel.h"\n')
    h_file.write("\n")
    h_file.write("///-------------------------------------------------------------------------\n")
    h_file.write("// Forward Declarations\n")
    h_file.write("class DwarfElephantRBDiffusion"+Suffix_List[index]+";\n")
    h_file.write("\n")
    h_file.write("///----------------------------INPUT PARAMETERS-----------------------------\n")
    h_file.write("template<>\n")
    h_file.write("InputParameters validParams<DwarfElephantRBDiffusion"+Suffix_List[index]+">();\n")
    h_file.write("\n")
    h_file.write("///-------------------------------------------------------------------------\n")
    h_file.write("class DwarfElephantRBDiffusion"+Suffix_List[index]+" : public DwarfElephantRBKernel\n")
    h_file.write("{\n")
    h_file.write("\n")
    h_file.write("//----------------------------------PUBLIC----------------------------------\n")
    h_file.write("public:\n")
    h_file.write("  DwarfElephantRBDiffusion"+Suffix_List[index]+"(const InputParameters & parameters);\n")
    h_file.write("\n")
    h_file.write("//--------------------------------PROTECTED---------------------------------\n")
    h_file.write("protected:\n")
    h_file.write("\n")
    h_file.write("  /* Methods */\n")
    h_file.write("  virtual Real computeQpResidual() override;\n")
    h_file.write("  virtual Real computeQpJacobian() override;\n")
    h_file.write("  virtual Real computeQpOutput() override;\n")
    h_file.write("};\n")
    h_file.write("\n")
    h_file.write("///-------------------------------------------------------------------------\n")
    h_file.write("#endif // DWARFELEPHANTRBDIFFUSION"+Suffix_List[index]+"_H");
